#!/bin/bash

# MIT License
# 
# Copyright (c) 2020 jtyers, ayekat
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Wrapper for qutebrowser that allows the user to maintain different profiles for qutebrowser
#
usage="qutebrowser-profile [--list] [--choose [--only-existing] | --load <name> | --new <name>] [qutebrowser args]"
read -r -d '' help <<EOF
  qutebrowser-profile - use qutebrowser with per-profile cache, session history, etc

USAGE
  qutebrowser-profile [--list] [--choose [--only-existing] | --load <name> | --new <name>] [qutebrowser args]

  --choose, -c
    If specified, the user is asked to select a profile via dmenu. If dmenu returns an empty string or non-zero 
    exit code (eg user pressed escape instead of choosing an option) the operation is aborted and qutebrowser 
    is not opened.
 
    The user can choose any existing profile or type the name of a new profile into dmenu to load qutebrowser
    in a new profile. See --only-existing below to restrict this.
 
  --only-existing, -e
    If specified, and --choose is in operation, the user can only choose an existing profile.
 
  --list
    List all known profiles
  
  --dmenu
    Override location of dmenu. Rofi is autodetected without you needing to set this.
  
  --qutebrowser
    Override location of qutebrowser to call.

Version $QP_VERSION
https://github.com/jtyers/qutebrowser-profile
Written by Jonny Tyers
Released under the MIT Licence. See LICENCE file for full licence terms.

EOF

set -eu
QP_VERSION="0.0.1"

# Set default values as defined in XDG base directory spec
# https://specifications.freedesktop.org/basedir-spec/latest/
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

die() {
  echo -e "$@" >&2
  exit 1
}

listProfiles() {
  # our profilesRoot may contain dirs that are not qutebrowser profiles, so we look for
  # the 'state' file to determine whether something is a profile, and then pipe thru dirname
  find "$profilesRoot" -mindepth 2 -maxdepth 2 -name state -type f -printf "%P\n" | xargs dirname
}

# usage: checkProfileExists <profile>
checkProfileExists() {
  profile="$1"
  [ -d "$profilesRoot/$profile" ] || die "profile $profile does not exist"
}

# usage: runQbWithProfile <profile>
runQbWithProfile() {
  profile="$1"
  qbArgs+=("-r" "$profile")

  runQb ${qbArgs[@]}
}

# usage: runQb <args>
runQb() {
  # https://github.com/ayekat/dotfiles/blob/master/bin/qutebrowser
  # https://wiki.archlinux.org/index.php/Qutebrowser#dwb-like_session_handling
  
  # $XDG_RUNTIME_DIR/qutebrowser/$session/cache → $XDG_CACHE_HOME/qutebrowser/$session
  # $XDG_RUNTIME_DIR/qutebrowser/$session/data → $XDG_DATA_HOME/qutebrowser/$session
  # $XDG_RUNTIME_DIR/qutebrowser/$session/config → $XDG_CONFIG_HOME/qutebrowser
  # $XDG_RUNTIME_DIR/qutebrowser/$session/runtime (no symlink, regular directory)
  #
  # We then specify $XDG_RUNTIME_DIR/qutebrowser/$session as a --basedir, and the
  # files will end up in their intended locations (notice how the config directory
  # is the same for all sessions, as there is no point in keeping it separate).
  #
  # YOU HAVE BEEN WARNED.
  #
  # Written by ayekat in an burst of nostalgy, on a mildly cold wednesday night in
  # February 2017.
  #
  # Enhanced a little by jonny on a dreary cold Friday morning in December 2018.

  # Translate options: remove occurrences of -r/--restore from the list of
  # command line arguments and save the session name for later; ignore -R (TODO):
  session='default'
  basedir_specified=0
  opts_read=0
  while [ $opts_read -lt $# ]; do
    opt="$1" && shift
    case "$opt" in
      (--basedir) basedir_specified=1 ;;
      (-r|-[!-]*r|--restore) test $# -gt 0 && session="$1" && shift && continue ;;
      (-R) continue ;; # TODO
    esac
    set -- "$@" "$opt"
    opts_read=$((opts_read + 1))
  done

  # Set up session base directory, unless --basedir has been specified by the
  # user:
  if [ $basedir_specified -eq 0 ]; then
    basedir="$XDG_RUNTIME_DIR/qutebrowser/$session"
    set -- --basedir "$basedir" "$@"
    mkdir -p \
      "$basedir" \
      "$XDG_CONFIG_HOME/qutebrowser" \
      "$XDG_CACHE_HOME/qutebrowser/$session" \
      "$XDG_DATA_HOME/qutebrowser/$session" \
      "$basedir/runtime"
    ln -fsT "$XDG_CONFIG_HOME/qutebrowser" "$basedir/config"
    ln -fsT "$XDG_CACHE_HOME/qutebrowser/$session" "$basedir/cache"
    ln -fsT "$XDG_DATA_HOME/qutebrowser/$session" "$basedir/data"
  fi

  $qutebrowser --set window.title_format "{perc}qute [${session}]{title_sep}{current_title}" "$@" &>/dev/null &
}

#uid=$(id -u)
profilesRoot="$XDG_DATA_HOME/qutebrowser" #"/run/user/$uid/qutebrowser"
choose=0
onlyExisting=0
list=0
dmenu=""
qutebrowser="qutebrowser"
load=""
new=""
rofi=0
declare -a qbArgs

if [ $# -eq 0 ]; then
  # if no args specified, assume --choose
  choose=1

else
  while true; do
    [ $# -eq 0 ] && break

    case $1 in
      --help|-h) echo "$help"; exit 0 ;;
      --qutebrowser) qutebrowser="$2"; shift; shift ;;
      --dmenu) dmenu="$2"; shift; shift ;;
      
      --list|-l) list=1; shift ;;
      --choose|-c) choose=1; shift ;;
      --only-existing|-e) onlyExisting=1; shift ;;
      --load|-p)
        [ $# -ge 2 ] || die "you must specify a profile to load\n\n$usage"
        load="$2"
        shift; shift;
        ;;
      --new|-n)
        [ $# -ge 2 ] || die "you must specify a profile to create\n\n$usage"
        new="$2";shift; shift
        ;;

      --restore|-r)
        # these are qutebrowser args that interfere with our profile management, so we filter them out
        echo "warning: ignoring $1" >&2
        shift; shift; # -r has a <session> arg, so skip that too
        ;;

      --override-restore|-R)
        # these are qutebrowser args that interfere with our profile management, so we filter them out
        echo "warning: ignoring $1" >&2
        shift;
        ;;

      *) qbArgs+=("$1"); shift; ;;
    esac
  done
fi

if [ -z "$dmenu" ]; then
  if which rofi >/dev/null; then
    dmenu="rofi -dmenu"
    rofi=1

  elif which dmenu >/dev/null; then
    dmenu="dmenu"

  else
    die "neither dmenu or rofi are available on \$PATH; either install them or use --dmenu to specify manually"
  fi
fi

if [ -z "$load" ] && [ -z "$new" ] && [ $choose -eq 0 ] && [ $list -eq 0 ]; then
  # if user chose neither --choose or --list, assume --choose
  choose=1
fi

if [ $list -eq 1 ]; then
  listProfiles

elif [ $choose -eq 1 ]; then
  [ -n "$new" ] && die "cannot use --choose with --new"
  [ -n "$load" ] && die "cannot use --choose with --load"

  dmenuArgs="-p qutebrowser"

  [ $rofi -eq 1 ] && dmenuArgs="$dmenuArgs -mesg ${qbArgs:-}"

  [ $onlyExisting -eq 1 ] && dmenuArgs="$dmenuArgs -no-custom"

  set +e
  chosenProfile=$(
    listProfiles | $dmenu $dmenuArgs
  )
  set -e

  if [ -z "$chosenProfile" ]; then
    # if user chooses no profile, treat this as an intended cancellation and exit
    # with success (zero), so xdg-open does not try other browsers thinking we failed
    echo "no profile chosen" >&2
    exit 0
  fi

  [ $onlyExisting -eq 1 ] && checkProfileExists "$chosenProfile" # double-check

  runQbWithProfile "$chosenProfile"

elif [ -n "$load" ]; then
  [ -n "$new" ] && die "cannot use --load with --new"
  checkProfileExists "$load"
  
  runQbWithProfile "$load"

elif [ -n "$new" ]; then
  [ -n "$load" ] && die "cannot use --load with --new"
  
  runQbWithProfile "$new"
fi
